//  ----------------------------------------------------------------------
//  File Name   : GenCFold/dual_timer_reg_venusa.h
//  Description : C header file generated by Python script.
//  Author      : dlchang
//  Script Ver  : LS.AUTO_REG.2024.12.12
//  SVN Revision: Can't find <<VenusA_SoC_Memory_Mapping.xlsx>> SVN detail info,pls chk£¡£¡
//  Create Time : 2025-04-18 09:52:08
//  Comments    : 
//  ----------------------------------------------------------------------

#ifndef __DUAL_TIMER_REGFILE_H__
#define __DUAL_TIMER_REGFILE_H__

#include <stdint.h>

#define DUAL_TIMER_LOAD0_OFFSET                     0x000
#define DUAL_TIMER_LOAD0_LOAD_L32_Pos               0
#define DUAL_TIMER_LOAD0_LOAD_L32_Msk               0xffffffff

#define DUAL_TIMER_VALUE0_OFFSET                    0x004
#define DUAL_TIMER_VALUE0_VALUE_L32_Pos             0
#define DUAL_TIMER_VALUE0_VALUE_L32_Msk             0xffffffff

#define DUAL_TIMER_CONTROL0_OFFSET                  0x008
#define DUAL_TIMER_CONTROL0_RESERVED0_Pos           8
#define DUAL_TIMER_CONTROL0_RESERVED0_Msk           0xffffff00
#define DUAL_TIMER_CONTROL0_ENABLE_Pos              7
#define DUAL_TIMER_CONTROL0_ENABLE_Msk              0x80
#define DUAL_TIMER_CONTROL0_MODE_Pos                6
#define DUAL_TIMER_CONTROL0_MODE_Msk                0x40
#define DUAL_TIMER_CONTROL0_INT_ENABLE_Pos          5
#define DUAL_TIMER_CONTROL0_INT_ENABLE_Msk          0x20
#define DUAL_TIMER_CONTROL0_RESERVED1_Pos           4
#define DUAL_TIMER_CONTROL0_RESERVED1_Msk           0x10
#define DUAL_TIMER_CONTROL0_TIMERPRE_Pos            2
#define DUAL_TIMER_CONTROL0_TIMERPRE_Msk            0xc
#define DUAL_TIMER_CONTROL0_SIZE_Pos                1
#define DUAL_TIMER_CONTROL0_SIZE_Msk                0x2
#define DUAL_TIMER_CONTROL0_ONESHOT_Pos             0
#define DUAL_TIMER_CONTROL0_ONESHOT_Msk             0x1

#define DUAL_TIMER_INTCLR0_OFFSET                   0x00C
#define DUAL_TIMER_INTCLR0_INTCLR_L32_Pos           0
#define DUAL_TIMER_INTCLR0_INTCLR_L32_Msk           0xffffffff

#define DUAL_TIMER_RIS0_OFFSET                      0x010
#define DUAL_TIMER_RIS0_RESERVED0_Pos               1
#define DUAL_TIMER_RIS0_RESERVED0_Msk               0xfffffffe
#define DUAL_TIMER_RIS0_RAW_INT_Pos                 0
#define DUAL_TIMER_RIS0_RAW_INT_Msk                 0x1

#define DUAL_TIMER_MIS0_OFFSET                      0x014
#define DUAL_TIMER_MIS0_RESERVED0_Pos               1
#define DUAL_TIMER_MIS0_RESERVED0_Msk               0xfffffffe
#define DUAL_TIMER_MIS0_INT_Pos                     0
#define DUAL_TIMER_MIS0_INT_Msk                     0x1

#define DUAL_TIMER_BGLOAD0_OFFSET                   0x018
#define DUAL_TIMER_BGLOAD0_BGLOAD_L32_Pos           0
#define DUAL_TIMER_BGLOAD0_BGLOAD_L32_Msk           0xffffffff

#define DUAL_TIMER_RESERVED_OFFSET                  0x01C
#define DUAL_TIMER_RESERVED_RESERVED0_Pos           0
#define DUAL_TIMER_RESERVED_RESERVED0_Msk           0xffffffff

#define DUAL_TIMER_LOAD1_OFFSET                     0x020
#define DUAL_TIMER_LOAD1_LOAD_L32_Pos               0
#define DUAL_TIMER_LOAD1_LOAD_L32_Msk               0xffffffff

#define DUAL_TIMER_VALUE1_OFFSET                    0x024
#define DUAL_TIMER_VALUE1_VALUE_L32_Pos             0
#define DUAL_TIMER_VALUE1_VALUE_L32_Msk             0xffffffff

#define DUAL_TIMER_CONTROL1_OFFSET                  0x028
#define DUAL_TIMER_CONTROL1_RESERVED0_Pos           8
#define DUAL_TIMER_CONTROL1_RESERVED0_Msk           0xffffff00
#define DUAL_TIMER_CONTROL1_ENABLE_Pos              7
#define DUAL_TIMER_CONTROL1_ENABLE_Msk              0x80
#define DUAL_TIMER_CONTROL1_MODE_Pos                6
#define DUAL_TIMER_CONTROL1_MODE_Msk                0x40
#define DUAL_TIMER_CONTROL1_INT_ENABLE_Pos          5
#define DUAL_TIMER_CONTROL1_INT_ENABLE_Msk          0x20
#define DUAL_TIMER_CONTROL1_RESERVED1_Pos           4
#define DUAL_TIMER_CONTROL1_RESERVED1_Msk           0x10
#define DUAL_TIMER_CONTROL1_TIMERPRE_Pos            2
#define DUAL_TIMER_CONTROL1_TIMERPRE_Msk            0xc
#define DUAL_TIMER_CONTROL1_SIZE_Pos                1
#define DUAL_TIMER_CONTROL1_SIZE_Msk                0x2
#define DUAL_TIMER_CONTROL1_ONESHOT_Pos             0
#define DUAL_TIMER_CONTROL1_ONESHOT_Msk             0x1

#define DUAL_TIMER_INTCLR1_OFFSET                   0x02C
#define DUAL_TIMER_INTCLR1_INTCLR_L32_Pos           0
#define DUAL_TIMER_INTCLR1_INTCLR_L32_Msk           0xffffffff

#define DUAL_TIMER_RIS1_OFFSET                      0x030
#define DUAL_TIMER_RIS1_RESERVED0_Pos               1
#define DUAL_TIMER_RIS1_RESERVED0_Msk               0xfffffffe
#define DUAL_TIMER_RIS1_RAW_INT_Pos                 0
#define DUAL_TIMER_RIS1_RAW_INT_Msk                 0x1

#define DUAL_TIMER_MIS1_OFFSET                      0x034
#define DUAL_TIMER_MIS1_RESERVED0_Pos               1
#define DUAL_TIMER_MIS1_RESERVED0_Msk               0xfffffffe
#define DUAL_TIMER_MIS1_INT_Pos                     0
#define DUAL_TIMER_MIS1_INT_Msk                     0x1

#define DUAL_TIMER_BGLOAD1_OFFSET                   0x038
#define DUAL_TIMER_BGLOAD1_BGLOAD_L32_Pos           0
#define DUAL_TIMER_BGLOAD1_BGLOAD_L32_Msk           0xffffffff

struct DUAL_TIMER_REG_LOAD0_BITS
{
    volatile uint32_t LOAD_L32                      : 32; // bit 0~31
};

union DUAL_TIMER_REG_LOAD0 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_LOAD0_BITS                bit;
};

struct DUAL_TIMER_REG_VALUE0_BITS
{
    volatile uint32_t VALUE_L32                     : 32; // bit 0~31
};

union DUAL_TIMER_REG_VALUE0 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_VALUE0_BITS               bit;
};

struct DUAL_TIMER_REG_CONTROL0_BITS
{
    volatile uint32_t ONESHOT                       : 1; // bit 0~0
    volatile uint32_t SIZE                          : 1; // bit 1~1
    volatile uint32_t TIMERPRE                      : 2; // bit 2~3
    volatile uint32_t RESERVED1                     : 1; // bit 4~4
    volatile uint32_t INT_ENABLE                    : 1; // bit 5~5
    volatile uint32_t MODE                          : 1; // bit 6~6
    volatile uint32_t ENABLE                        : 1; // bit 7~7
    volatile uint32_t RESERVED0                     : 24; // bit 8~31
};

union DUAL_TIMER_REG_CONTROL0 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_CONTROL0_BITS             bit;
};

struct DUAL_TIMER_REG_INTCLR0_BITS
{
    volatile uint32_t INTCLR_L32                    : 32; // bit 0~31
};

union DUAL_TIMER_REG_INTCLR0 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_INTCLR0_BITS              bit;
};

struct DUAL_TIMER_REG_RIS0_BITS
{
    volatile uint32_t RAW_INT                       : 1; // bit 0~1
    volatile uint32_t RESERVED0                     : 31; // bit 1~31
};

union DUAL_TIMER_REG_RIS0 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_RIS0_BITS                 bit;
};

struct DUAL_TIMER_REG_MIS0_BITS
{
    volatile uint32_t INT                           : 1; // bit 0~1
    volatile uint32_t RESERVED0                     : 31; // bit 1~31
};

union DUAL_TIMER_REG_MIS0 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_MIS0_BITS                 bit;
};

struct DUAL_TIMER_REG_BGLOAD0_BITS
{
    volatile uint32_t BGLOAD_L32                    : 32; // bit 0~31
};

union DUAL_TIMER_REG_BGLOAD0 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_BGLOAD0_BITS              bit;
};

struct DUAL_TIMER_REG_RESERVED_BITS
{
    volatile uint32_t RESERVED0                     : 32; // bit 0~31
};

union DUAL_TIMER_REG_RESERVED {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_RESERVED_BITS             bit;
};

struct DUAL_TIMER_REG_LOAD1_BITS
{
    volatile uint32_t LOAD_L32                      : 32; // bit 0~31
};

union DUAL_TIMER_REG_LOAD1 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_LOAD1_BITS                bit;
};

struct DUAL_TIMER_REG_VALUE1_BITS
{
    volatile uint32_t VALUE_L32                     : 32; // bit 0~31
};

union DUAL_TIMER_REG_VALUE1 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_VALUE1_BITS               bit;
};

struct DUAL_TIMER_REG_CONTROL1_BITS
{
    volatile uint32_t ONESHOT                       : 1; // bit 0~0
    volatile uint32_t SIZE                          : 1; // bit 1~1
    volatile uint32_t TIMERPRE                      : 2; // bit 2~3
    volatile uint32_t RESERVED1                     : 1; // bit 4~4
    volatile uint32_t INT_ENABLE                    : 1; // bit 5~5
    volatile uint32_t MODE                          : 1; // bit 6~6
    volatile uint32_t ENABLE                        : 1; // bit 7~7
    volatile uint32_t RESERVED0                     : 24; // bit 8~31
};

union DUAL_TIMER_REG_CONTROL1 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_CONTROL1_BITS             bit;
};

struct DUAL_TIMER_REG_INTCLR1_BITS
{
    volatile uint32_t INTCLR_L32                    : 32; // bit 0~31
};

union DUAL_TIMER_REG_INTCLR1 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_INTCLR1_BITS              bit;
};

struct DUAL_TIMER_REG_RIS1_BITS
{
    volatile uint32_t RAW_INT                       : 1; // bit 0~1
    volatile uint32_t RESERVED0                     : 31; // bit 1~31
};

union DUAL_TIMER_REG_RIS1 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_RIS1_BITS                 bit;
};

struct DUAL_TIMER_REG_MIS1_BITS
{
    volatile uint32_t INT                           : 1; // bit 0~1
    volatile uint32_t RESERVED0                     : 31; // bit 1~31
};

union DUAL_TIMER_REG_MIS1 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_MIS1_BITS                 bit;
};

struct DUAL_TIMER_REG_BGLOAD1_BITS
{
    volatile uint32_t BGLOAD_L32                    : 32; // bit 0~31
};

union DUAL_TIMER_REG_BGLOAD1 {
    volatile uint32_t                               all;
    struct DUAL_TIMER_REG_BGLOAD1_BITS              bit;
};

typedef struct
{
    union DUAL_TIMER_REG_LOAD0                      REG_LOAD0;   // 0x000
    union DUAL_TIMER_REG_VALUE0                     REG_VALUE0;  // 0x004
    union DUAL_TIMER_REG_CONTROL0                   REG_CONTROL0; // 0x008
    union DUAL_TIMER_REG_INTCLR0                    REG_INTCLR0; // 0x00C
    union DUAL_TIMER_REG_RIS0                       REG_RIS0;    // 0x010
    union DUAL_TIMER_REG_MIS0                       REG_MIS0;    // 0x014
    union DUAL_TIMER_REG_BGLOAD0                    REG_BGLOAD0; // 0x018
    union DUAL_TIMER_REG_RESERVED                   REG_RESERVED; // 0x01C
    union DUAL_TIMER_REG_LOAD1                      REG_LOAD1;   // 0x020
    union DUAL_TIMER_REG_VALUE1                     REG_VALUE1;  // 0x024
    union DUAL_TIMER_REG_CONTROL1                   REG_CONTROL1; // 0x028
    union DUAL_TIMER_REG_INTCLR1                    REG_INTCLR1; // 0x02C
    union DUAL_TIMER_REG_RIS1                       REG_RIS1;    // 0x030
    union DUAL_TIMER_REG_MIS1                       REG_MIS1;    // 0x034
    union DUAL_TIMER_REG_BGLOAD1                    REG_BGLOAD1; // 0x038
} DUAL_TIMER_RegDef;


#endif // __DUAL_TIMER_REGFILE_H__

