//  ----------------------------------------------------------------------
//  File Name   : GenCFold/i8080_out_reg_venusa.h
//  Description : C header file generated by Python script.
//  Author      : dlchang
//  Script Ver  : LS.AUTO_REG.2024.12.12
//  SVN Revision: Can't find <<VenusA_SoC_Memory_Mapping.xlsx>> SVN detail info,pls chk£¡£¡
//  Create Time : 2025-04-27 15:29:43
//  Comments    : 
//  ----------------------------------------------------------------------

#ifndef __I8080_OUT_REGFILE_H__
#define __I8080_OUT_REGFILE_H__

#include <stdint.h>

#define I8080_OUT_TRANSFMT_OFFSET                   0x000
#define I8080_OUT_TRANSFMT_I8080_CMD_LEN_Pos        12
#define I8080_OUT_TRANSFMT_I8080_CMD_LEN_Msk        0x3000
#define I8080_OUT_TRANSFMT_I8080_DATA_LEN_Pos       4
#define I8080_OUT_TRANSFMT_I8080_DATA_LEN_Msk       0x1f0
#define I8080_OUT_TRANSFMT_I8080_TRANS_MODE_Pos     2
#define I8080_OUT_TRANSFMT_I8080_TRANS_MODE_Msk     0xc
#define I8080_OUT_TRANSFMT_I8080_DATA_MERGE_Pos     1
#define I8080_OUT_TRANSFMT_I8080_DATA_MERGE_Msk     0x2
#define I8080_OUT_TRANSFMT_I8080_LSB_Pos            0
#define I8080_OUT_TRANSFMT_I8080_LSB_Msk            0x1

#define I8080_OUT_TRANSNUM_OFFSET                   0x004
#define I8080_OUT_TRANSNUM_I8080_DUMMY_NUM_Pos      24
#define I8080_OUT_TRANSNUM_I8080_DUMMY_NUM_Msk      0x3000000
#define I8080_OUT_TRANSNUM_I8080_RD_NUM_Pos         20
#define I8080_OUT_TRANSNUM_I8080_RD_NUM_Msk         0xf00000
#define I8080_OUT_TRANSNUM_I8080_WR_NUM_Pos         0
#define I8080_OUT_TRANSNUM_I8080_WR_NUM_Msk         0xfffff

#define I8080_OUT_TRANSCTRL_OFFSET                  0x008
#define I8080_OUT_TRANSCTRL_CS_N_OUT_Pos            6
#define I8080_OUT_TRANSCTRL_CS_N_OUT_Msk            0x40
#define I8080_OUT_TRANSCTRL_DIRECT_CS_IO_Pos        5
#define I8080_OUT_TRANSCTRL_DIRECT_CS_IO_Msk        0x20
#define I8080_OUT_TRANSCTRL_RS_OUT_Pos              4
#define I8080_OUT_TRANSCTRL_RS_OUT_Msk              0x10
#define I8080_OUT_TRANSCTRL_DIRECT_RS_IO_Pos        3
#define I8080_OUT_TRANSCTRL_DIRECT_RS_IO_Msk        0x8
#define I8080_OUT_TRANSCTRL_I8080_565_BYTE_CONV_EN_Pos    2
#define I8080_OUT_TRANSCTRL_I8080_565_BYTE_CONV_EN_Msk    0x4
#define I8080_OUT_TRANSCTRL_I8080_CMD_EN_Pos        1
#define I8080_OUT_TRANSCTRL_I8080_CMD_EN_Msk        0x2
#define I8080_OUT_TRANSCTRL_I8080_EN_Pos            0
#define I8080_OUT_TRANSCTRL_I8080_EN_Msk            0x1

#define I8080_OUT_CMD_OFFSET                        0x00C
#define I8080_OUT_CMD_CMD_OPCODE_Pos                0
#define I8080_OUT_CMD_CMD_OPCODE_Msk                0xffffffff

#define I8080_OUT_FIFOCTRL_OFFSET                   0x010
#define I8080_OUT_FIFOCTRL_TXTHRES_Pos              8
#define I8080_OUT_FIFOCTRL_TXTHRES_Msk              0x3f00
#define I8080_OUT_FIFOCTRL_RXTHRES_Pos              4
#define I8080_OUT_FIFOCTRL_RXTHRES_Msk              0xf0
#define I8080_OUT_FIFOCTRL_TXDMAEN_Pos              3
#define I8080_OUT_FIFOCTRL_TXDMAEN_Msk              0x8
#define I8080_OUT_FIFOCTRL_TXFIFO_RST_Pos           2
#define I8080_OUT_FIFOCTRL_TXFIFO_RST_Msk           0x4
#define I8080_OUT_FIFOCTRL_RXFIFO_RST_Pos           1
#define I8080_OUT_FIFOCTRL_RXFIFO_RST_Msk           0x2
#define I8080_OUT_FIFOCTRL_I8080_SOFT_CLR_Pos       0
#define I8080_OUT_FIFOCTRL_I8080_SOFT_CLR_Msk       0x1

#define I8080_OUT_STATUS_OFFSET                     0x014
#define I8080_OUT_STATUS_TXFULL_Pos                 25
#define I8080_OUT_STATUS_TXFULL_Msk                 0x2000000
#define I8080_OUT_STATUS_TXEMPTY_Pos                24
#define I8080_OUT_STATUS_TXEMPTY_Msk                0x1000000
#define I8080_OUT_STATUS_TXNUM_Pos                  16
#define I8080_OUT_STATUS_TXNUM_Msk                  0x3f0000
#define I8080_OUT_STATUS_RXFULL_Pos                 13
#define I8080_OUT_STATUS_RXFULL_Msk                 0x2000
#define I8080_OUT_STATUS_RXEMPTY_Pos                12
#define I8080_OUT_STATUS_RXEMPTY_Msk                0x1000
#define I8080_OUT_STATUS_RXNUM_Pos                  8
#define I8080_OUT_STATUS_RXNUM_Msk                  0xf00
#define I8080_OUT_STATUS_I8080_BUSY_Pos             0
#define I8080_OUT_STATUS_I8080_BUSY_Msk             0x1

#define I8080_OUT_TIMING_OFFSET                     0x018
#define I8080_OUT_TIMING_CS2SCLK_Pos                8
#define I8080_OUT_TIMING_CS2SCLK_Msk                0x700
#define I8080_OUT_TIMING_CSHT_Pos                   4
#define I8080_OUT_TIMING_CSHT_Msk                   0xf0
#define I8080_OUT_TIMING_SCLK_DIV_Pos               0
#define I8080_OUT_TIMING_SCLK_DIV_Msk               0xf

#define I8080_OUT_I8080_INTR_MASK_OFFSET            0x01C
#define I8080_OUT_I8080_INTR_MASK_TRANS_END_MASK_Pos    6
#define I8080_OUT_I8080_INTR_MASK_TRANS_END_MASK_Msk    0x40
#define I8080_OUT_I8080_INTR_MASK_TXFIFO_RD_EMPTY_MASK_Pos    5
#define I8080_OUT_I8080_INTR_MASK_TXFIFO_RD_EMPTY_MASK_Msk    0x20
#define I8080_OUT_I8080_INTR_MASK_TXFIFO_WR_FULL_MASK_Pos    4
#define I8080_OUT_I8080_INTR_MASK_TXFIFO_WR_FULL_MASK_Msk    0x10
#define I8080_OUT_I8080_INTR_MASK_TXFIFO_UNDERFLOW_MASK_Pos    3
#define I8080_OUT_I8080_INTR_MASK_TXFIFO_UNDERFLOW_MASK_Msk    0x8
#define I8080_OUT_I8080_INTR_MASK_TXFIFO_OVERFLOW_MASK_Pos    2
#define I8080_OUT_I8080_INTR_MASK_TXFIFO_OVERFLOW_MASK_Msk    0x4
#define I8080_OUT_I8080_INTR_MASK_DMA_REQ_MASK_Pos    1
#define I8080_OUT_I8080_INTR_MASK_DMA_REQ_MASK_Msk    0x2
#define I8080_OUT_I8080_INTR_MASK_DMA_SINGLE_MASK_Pos    0
#define I8080_OUT_I8080_INTR_MASK_DMA_SINGLE_MASK_Msk    0x1

#define I8080_OUT_I8080_INTR_CLR_OFFSET             0x020
#define I8080_OUT_I8080_INTR_CLR_TRANS_END_CLR_Pos    6
#define I8080_OUT_I8080_INTR_CLR_TRANS_END_CLR_Msk    0x40
#define I8080_OUT_I8080_INTR_CLR_TXFIFO_RD_EMPTY_CLR_Pos    5
#define I8080_OUT_I8080_INTR_CLR_TXFIFO_RD_EMPTY_CLR_Msk    0x20
#define I8080_OUT_I8080_INTR_CLR_TXFIFO_WR_FULL_CLR_Pos    4
#define I8080_OUT_I8080_INTR_CLR_TXFIFO_WR_FULL_CLR_Msk    0x10
#define I8080_OUT_I8080_INTR_CLR_TXFIFO_UNDERFLOW_CLR_Pos    3
#define I8080_OUT_I8080_INTR_CLR_TXFIFO_UNDERFLOW_CLR_Msk    0x8
#define I8080_OUT_I8080_INTR_CLR_TXFIFO_OVERFLOW_CLR_Pos    2
#define I8080_OUT_I8080_INTR_CLR_TXFIFO_OVERFLOW_CLR_Msk    0x4
#define I8080_OUT_I8080_INTR_CLR_DMA_REQ_CLR_Pos    1
#define I8080_OUT_I8080_INTR_CLR_DMA_REQ_CLR_Msk    0x2
#define I8080_OUT_I8080_INTR_CLR_DMA_SINGLE_CLR_Pos    0
#define I8080_OUT_I8080_INTR_CLR_DMA_SINGLE_CLR_Msk    0x1

#define I8080_OUT_I8080_IRQ_OFFSET                  0x024
#define I8080_OUT_I8080_IRQ_I8080_IRQ_Pos           0
#define I8080_OUT_I8080_IRQ_I8080_IRQ_Msk           0x1

#define I8080_OUT_I8080_INT_STATUS_OFFSET           0x028
#define I8080_OUT_I8080_INT_STATUS_TRANS_END_ISR_Pos    6
#define I8080_OUT_I8080_INT_STATUS_TRANS_END_ISR_Msk    0x40
#define I8080_OUT_I8080_INT_STATUS_TXFIFO_RD_EMPTY_ISR_Pos    5
#define I8080_OUT_I8080_INT_STATUS_TXFIFO_RD_EMPTY_ISR_Msk    0x20
#define I8080_OUT_I8080_INT_STATUS_TXFIFO_WR_FULL_ISR_Pos    4
#define I8080_OUT_I8080_INT_STATUS_TXFIFO_WR_FULL_ISR_Msk    0x10
#define I8080_OUT_I8080_INT_STATUS_TXFIFO_UNDERFLOW_ISR_Pos    3
#define I8080_OUT_I8080_INT_STATUS_TXFIFO_UNDERFLOW_ISR_Msk    0x8
#define I8080_OUT_I8080_INT_STATUS_TXFIFO_OVERFLOW_ISR_Pos    2
#define I8080_OUT_I8080_INT_STATUS_TXFIFO_OVERFLOW_ISR_Msk    0x4
#define I8080_OUT_I8080_INT_STATUS_DMA_REQ_ISR_Pos    1
#define I8080_OUT_I8080_INT_STATUS_DMA_REQ_ISR_Msk    0x2
#define I8080_OUT_I8080_INT_STATUS_DMA_SINGLE_ISR_Pos    0
#define I8080_OUT_I8080_INT_STATUS_DMA_SINGLE_ISR_Msk    0x1

#define I8080_OUT_I8080_INT_RAW_STATUS_OFFSET       0x02C
#define I8080_OUT_I8080_INT_RAW_STATUS_TRANS_END_IRSR_Pos    6
#define I8080_OUT_I8080_INT_RAW_STATUS_TRANS_END_IRSR_Msk    0x40
#define I8080_OUT_I8080_INT_RAW_STATUS_TXFIFO_RD_EMPTY_IRSR_Pos    5
#define I8080_OUT_I8080_INT_RAW_STATUS_TXFIFO_RD_EMPTY_IRSR_Msk    0x20
#define I8080_OUT_I8080_INT_RAW_STATUS_TXFIFO_WR_FULL_IRSR_Pos    4
#define I8080_OUT_I8080_INT_RAW_STATUS_TXFIFO_WR_FULL_IRSR_Msk    0x10
#define I8080_OUT_I8080_INT_RAW_STATUS_TXFIFO_UNDERFLOW_IRSR_Pos    3
#define I8080_OUT_I8080_INT_RAW_STATUS_TXFIFO_UNDERFLOW_IRSR_Msk    0x8
#define I8080_OUT_I8080_INT_RAW_STATUS_TXFIFO_OVERFLOW_IRSR_Pos    2
#define I8080_OUT_I8080_INT_RAW_STATUS_TXFIFO_OVERFLOW_IRSR_Msk    0x4
#define I8080_OUT_I8080_INT_RAW_STATUS_DMA_REQ_IRSR_Pos    1
#define I8080_OUT_I8080_INT_RAW_STATUS_DMA_REQ_IRSR_Msk    0x2
#define I8080_OUT_I8080_INT_RAW_STATUS_DMA_SINGLE_IRSR_Pos    0
#define I8080_OUT_I8080_INT_RAW_STATUS_DMA_SINGLE_IRSR_Msk    0x1

#define I8080_OUT_I8080_RD_DATA_OFFSET              0x030
#define I8080_OUT_I8080_RD_DATA_I8080_RD_DATA_Pos    0
#define I8080_OUT_I8080_RD_DATA_I8080_RD_DATA_Msk    0xff

struct I8080_OUT_REG_TRANSFMT_BITS
{
    volatile uint32_t I8080_LSB                     : 1; // bit 0~0
    volatile uint32_t I8080_DATA_MERGE              : 1; // bit 1~1
    volatile uint32_t I8080_TRANS_MODE              : 2; // bit 2~3
    volatile uint32_t I8080_DATA_LEN                : 5; // bit 4~8
    volatile uint32_t RESV_9_11                     : 3; // bit 9~11
    volatile uint32_t I8080_CMD_LEN                 : 2; // bit 12~13
    volatile uint32_t RESV_14_31                    : 18; // bit 14~31
};

union I8080_OUT_REG_TRANSFMT {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_TRANSFMT_BITS              bit;
};

struct I8080_OUT_REG_TRANSNUM_BITS
{
    volatile uint32_t I8080_WR_NUM                  : 20; // bit 0~19
    volatile uint32_t I8080_RD_NUM                  : 4; // bit 20~23
    volatile uint32_t I8080_DUMMY_NUM               : 2; // bit 24~25
    volatile uint32_t RESV_26_31                    : 6; // bit 26~31
};

union I8080_OUT_REG_TRANSNUM {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_TRANSNUM_BITS              bit;
};

struct I8080_OUT_REG_TRANSCTRL_BITS
{
    volatile uint32_t I8080_EN                      : 1; // bit 0~0
    volatile uint32_t I8080_CMD_EN                  : 1; // bit 1~1
    volatile uint32_t I8080_565_BYTE_CONV_EN        : 1; // bit 2~2
    volatile uint32_t DIRECT_RS_IO                  : 1; // bit 3~3
    volatile uint32_t RS_OUT                        : 1; // bit 4~4
    volatile uint32_t DIRECT_CS_IO                  : 1; // bit 5~5
    volatile uint32_t CS_N_OUT                      : 1; // bit 6~6
    volatile uint32_t RESV_7_31                     : 25; // bit 7~31
};

union I8080_OUT_REG_TRANSCTRL {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_TRANSCTRL_BITS             bit;
};

struct I8080_OUT_REG_CMD_BITS
{
    volatile uint32_t CMD_OPCODE                    : 32; // bit 0~31
};

union I8080_OUT_REG_CMD {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_CMD_BITS                   bit;
};

struct I8080_OUT_REG_FIFOCTRL_BITS
{
    volatile uint32_t I8080_SOFT_CLR                : 1; // bit 0~0
    volatile uint32_t RXFIFO_RST                    : 1; // bit 1~1
    volatile uint32_t TXFIFO_RST                    : 1; // bit 2~2
    volatile uint32_t TXDMAEN                       : 1; // bit 3~3
    volatile uint32_t RXTHRES                       : 4; // bit 4~7
    volatile uint32_t TXTHRES                       : 6; // bit 8~13
    volatile uint32_t RESV_14_31                    : 18; // bit 14~31
};

union I8080_OUT_REG_FIFOCTRL {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_FIFOCTRL_BITS              bit;
};

struct I8080_OUT_REG_STATUS_BITS
{
    volatile uint32_t I8080_BUSY                    : 1; // bit 0~0
    volatile uint32_t RESV_1_7                      : 7; // bit 1~7
    volatile uint32_t RXNUM                         : 4; // bit 8~11
    volatile uint32_t RXEMPTY                       : 1; // bit 12~12
    volatile uint32_t RXFULL                        : 1; // bit 13~13
    volatile uint32_t RESV_14_15                    : 2; // bit 14~15
    volatile uint32_t TXNUM                         : 6; // bit 16~21
    volatile uint32_t RESV_22_23                    : 2; // bit 22~23
    volatile uint32_t TXEMPTY                       : 1; // bit 24~24
    volatile uint32_t TXFULL                        : 1; // bit 25~25
    volatile uint32_t RESV_26_31                    : 6; // bit 26~31
};

union I8080_OUT_REG_STATUS {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_STATUS_BITS                bit;
};

struct I8080_OUT_REG_TIMING_BITS
{
    volatile uint32_t SCLK_DIV                      : 4; // bit 0~3
    volatile uint32_t CSHT                          : 4; // bit 4~7
    volatile uint32_t CS2SCLK                       : 3; // bit 8~10
    volatile uint32_t RESV_11_31                    : 21; // bit 11~31
};

union I8080_OUT_REG_TIMING {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_TIMING_BITS                bit;
};

struct I8080_OUT_REG_I8080_INTR_MASK_BITS
{
    volatile uint32_t DMA_SINGLE_MASK               : 1; // bit 0~0
    volatile uint32_t DMA_REQ_MASK                  : 1; // bit 1~1
    volatile uint32_t TXFIFO_OVERFLOW_MASK          : 1; // bit 2~2
    volatile uint32_t TXFIFO_UNDERFLOW_MASK         : 1; // bit 3~3
    volatile uint32_t TXFIFO_WR_FULL_MASK           : 1; // bit 4~4
    volatile uint32_t TXFIFO_RD_EMPTY_MASK          : 1; // bit 5~5
    volatile uint32_t TRANS_END_MASK                : 1; // bit 6~6
    volatile uint32_t RESV_7_31                     : 25; // bit 7~31
};

union I8080_OUT_REG_I8080_INTR_MASK {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_I8080_INTR_MASK_BITS       bit;
};

struct I8080_OUT_REG_I8080_INTR_CLR_BITS
{
    volatile uint32_t DMA_SINGLE_CLR                : 1; // bit 0~0
    volatile uint32_t DMA_REQ_CLR                   : 1; // bit 1~1
    volatile uint32_t TXFIFO_OVERFLOW_CLR           : 1; // bit 2~2
    volatile uint32_t TXFIFO_UNDERFLOW_CLR          : 1; // bit 3~3
    volatile uint32_t TXFIFO_WR_FULL_CLR            : 1; // bit 4~4
    volatile uint32_t TXFIFO_RD_EMPTY_CLR           : 1; // bit 5~5
    volatile uint32_t TRANS_END_CLR                 : 1; // bit 6~6
    volatile uint32_t RESV_7_31                     : 25; // bit 7~31
};

union I8080_OUT_REG_I8080_INTR_CLR {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_I8080_INTR_CLR_BITS        bit;
};

struct I8080_OUT_REG_I8080_IRQ_BITS
{
    volatile uint32_t I8080_IRQ                     : 1; // bit 0~0
    volatile uint32_t RESV_1_31                     : 31; // bit 1~31
};

union I8080_OUT_REG_I8080_IRQ {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_I8080_IRQ_BITS             bit;
};

struct I8080_OUT_REG_I8080_INT_STATUS_BITS
{
    volatile uint32_t DMA_SINGLE_ISR                : 1; // bit 0~0
    volatile uint32_t DMA_REQ_ISR                   : 1; // bit 1~1
    volatile uint32_t TXFIFO_OVERFLOW_ISR           : 1; // bit 2~2
    volatile uint32_t TXFIFO_UNDERFLOW_ISR          : 1; // bit 3~3
    volatile uint32_t TXFIFO_WR_FULL_ISR            : 1; // bit 4~4
    volatile uint32_t TXFIFO_RD_EMPTY_ISR           : 1; // bit 5~5
    volatile uint32_t TRANS_END_ISR                 : 1; // bit 6~6
    volatile uint32_t RESV_7_31                     : 25; // bit 7~31
};

union I8080_OUT_REG_I8080_INT_STATUS {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_I8080_INT_STATUS_BITS      bit;
};

struct I8080_OUT_REG_I8080_INT_RAW_STATUS_BITS
{
    volatile uint32_t DMA_SINGLE_IRSR               : 1; // bit 0~0
    volatile uint32_t DMA_REQ_IRSR                  : 1; // bit 1~1
    volatile uint32_t TXFIFO_OVERFLOW_IRSR          : 1; // bit 2~2
    volatile uint32_t TXFIFO_UNDERFLOW_IRSR         : 1; // bit 3~3
    volatile uint32_t TXFIFO_WR_FULL_IRSR           : 1; // bit 4~4
    volatile uint32_t TXFIFO_RD_EMPTY_IRSR          : 1; // bit 5~5
    volatile uint32_t TRANS_END_IRSR                : 1; // bit 6~6
    volatile uint32_t RESV_7_31                     : 25; // bit 7~31
};

union I8080_OUT_REG_I8080_INT_RAW_STATUS {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_I8080_INT_RAW_STATUS_BITS    bit;
};

struct I8080_OUT_REG_I8080_RD_DATA_BITS
{
    volatile uint32_t I8080_RD_DATA                 : 8; // bit 0~7
    volatile uint32_t RESV_8_31                     : 24; // bit 8~31
};

union I8080_OUT_REG_I8080_RD_DATA {
    volatile uint32_t                               all;
    struct I8080_OUT_REG_I8080_RD_DATA_BITS         bit;
};

typedef struct
{
    union I8080_OUT_REG_TRANSFMT                    REG_TRANSFMT; // 0x000
    union I8080_OUT_REG_TRANSNUM                    REG_TRANSNUM; // 0x004
    union I8080_OUT_REG_TRANSCTRL                   REG_TRANSCTRL; // 0x008
    union I8080_OUT_REG_CMD                         REG_CMD;     // 0x00C
    union I8080_OUT_REG_FIFOCTRL                    REG_FIFOCTRL; // 0x010
    union I8080_OUT_REG_STATUS                      REG_STATUS;  // 0x014
    union I8080_OUT_REG_TIMING                      REG_TIMING;  // 0x018
    union I8080_OUT_REG_I8080_INTR_MASK             REG_I8080_INTR_MASK; // 0x01C
    union I8080_OUT_REG_I8080_INTR_CLR              REG_I8080_INTR_CLR; // 0x020
    union I8080_OUT_REG_I8080_IRQ                   REG_I8080_IRQ; // 0x024
    union I8080_OUT_REG_I8080_INT_STATUS            REG_I8080_INT_STATUS; // 0x028
    union I8080_OUT_REG_I8080_INT_RAW_STATUS        REG_I8080_INT_RAW_STATUS; // 0x02C
    union I8080_OUT_REG_I8080_RD_DATA               REG_I8080_RD_DATA; // 0x030
} I8080_OUT_RegDef;


#endif // __I8080_OUT_REGFILE_H__

